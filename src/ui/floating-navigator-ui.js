/**
 * @file floating-navigator-ui.js
 * @description M√≥dulo de UI para gerenciar o paginador flutuante (dock)
 * que oferece atalhos de navega√ß√£o para os planos de leitura.
 *
 * @improvement A arquitetura deste m√≥dulo est√° preparada para, no futuro,
 * notificar o orquestrador (main.js) e tamb√©m "ativar" um plano ao clicar
 * em seu √≠cone, unificando a experi√™ncia de navega√ß√£o e ativa√ß√£o.
 * Por enquanto, ele cumpre a fun√ß√£o prim√°ria de navega√ß√£o suave.
 */

// --- Sele√ß√£o de Elementos ---
const navigatorEl = document.getElementById('floating-navigator');

// --- Fun√ß√µes Privadas ---

/**
 * Controla a visibilidade do paginador com base na posi√ß√£o de rolagem.
 * Ele deve desaparecer quando o usu√°rio atinge o final da p√°gina para n√£o
 * obstruir o conte√∫do, um comportamento crucial em dispositivos m√≥veis.
 */
function _toggleVisibilityOnScroll() {
    if (!navigatorEl) return;

    // A p√°gina inteira, usada para medir a altura total.
    const pageContent = document.body;
    // Uma margem de seguran√ßa para a detec√ß√£o ficar mais fluida e natural.
    const buffer = 30;

    // Condi√ß√£o: A posi√ß√£o da parte de baixo da janela vis√≠vel √© maior ou igual
    // √† altura total do conte√∫do da p√°gina (menos o buffer)?
    const isAtTheVeryBottom = (window.scrollY + window.innerHeight) >= (pageContent.offsetHeight - buffer);

    if (isAtTheVeryBottom) {
        // Se estamos no final da p√°gina, adiciona a classe que o esconde com anima√ß√£o.
        navigatorEl.classList.add('hidden-at-bottom');
    } else {
        // Caso contr√°rio, remove a classe, permitindo que ele apare√ßa.
        navigatorEl.classList.remove('hidden-at-bottom');
    }
}

// --- Fun√ß√µes P√∫blicas (API do M√≥dulo) ---

/**
 * Inicializa o m√≥dulo do paginador, configurando todos os listeners de eventos.
 * Usa delega√ß√£o de eventos para otimizar a performance.
 */
export function init() {
    if (!navigatorEl) {
        console.error("Elemento do paginador flutuante n√£o encontrado no DOM.");
        return;
    }

    // Delega√ß√£o de Eventos: um √∫nico listener no container para todos os bot√µes.
    navigatorEl.addEventListener('click', (event) => {
        // Encontra o link (<a>) mais pr√≥ximo que foi clicado.
        const button = event.target.closest('a.nav-button');
        if (!button) return; // Se o clique n√£o foi em um bot√£o, ignora.

        // Previne o comportamento padr√£o de "pular" para a √¢ncora.
        event.preventDefault();

        // Pega o ID do alvo do atributo href (ex: "#plan-card-XYZ") e remove o "#".
        const targetId = button.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
            // Se o elemento alvo existe, rola a tela suavemente at√© ele.
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    });

    // Adiciona os listeners globais para controlar a visibilidade ao rolar ou redimensionar.
    // `passive: true` melhora a performance de rolagem em navegadores modernos.
    window.addEventListener('scroll', _toggleVisibilityOnScroll, { passive: true });
    window.addEventListener('resize', _toggleVisibilityOnScroll);
}

/**
 * Renderiza os bot√µes do paginador com base na lista de planos de leitura do usu√°rio.
 * Esta fun√ß√£o √© chamada pelo `main.js` sempre que os dados s√£o atualizados.
 * @param {Array<object>} plans - A lista de planos do usu√°rio.
 */
export function render(plans) {
    if (!navigatorEl) return;

    // Se n√£o h√° planos, esconde o paginador e encerra a fun√ß√£o.
    if (!plans || plans.length === 0) {
        hide();
        return;
    }

    // Come√ßa a construir o HTML interno com o bot√£o "Home", que √© fixo.
    let innerHTML = `
        <a href="#header-logo" class="nav-button home-button" title="Ir para o topo">
            üè†
        </a>
    `;

    // Itera sobre a lista de planos e adiciona um bot√£o para cada um que tenha um √≠cone definido.
    plans.forEach(plan => {
        if (plan.icon) {
            innerHTML += `
                <a href="#plan-card-${plan.id}" class="nav-button" title="${plan.name}">
                    ${plan.icon}
                </a>
            `;
        }
    });

    // Insere o HTML gerado no elemento do paginador.
    navigatorEl.innerHTML = innerHTML;

    // Garante que o paginador esteja vis√≠vel e verifica seu estado de rolagem inicial.
    show();
    _toggleVisibilityOnScroll();
}

/**
 * Torna o paginador vis√≠vel adicionando a classe de controle de opacidade.
 */
export function show() {
    if (navigatorEl) navigatorEl.classList.add('visible');
}

/**
 * Esconde o paginador removendo a classe de controle de opacidade.
 */
export function hide() {
    if (navigatorEl) navigatorEl.classList.remove('visible');
}
